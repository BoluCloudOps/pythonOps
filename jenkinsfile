pipeline {
    agent any
    environment {
        DOCKERHUB_USERNAME = "boluops"
        APP_NAME = "jenkins_agrocd_ops"  // Adjusted to lowercase
        IMAGE_TAG = "${BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKERHUB_USERNAME}/${APP_NAME}".toLowerCase()  // Convert to lowercase
        REGISTRY_CREDS = "dockerhub"
    }
    stages {
        stage("Clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout SCM") {
            steps {
                git credentialsId: "github",
                    url: "https://github.com/BoluCloudOps/pythonOps.git",
                    branch: "main"
            }
        }
        stage("Verify workspace contents") {
            steps {
                sh "ls -la"
            }
        }
        stage("Build docker Image") {
            steps {
                script {
                    dir('/var/lib/jenkins/workspace/jenkins_agrocd_Ops') {
                        // Adjusted workspace path
                        docker.build("${IMAGE_NAME}:${BUILD_NUMBER}")
                        docker.image("${IMAGE_NAME}:${BUILD_NUMBER}").push()
                    }
                }
            }
        }
        stage("Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('', REGISTRY_CREDS) {
                        // Tag the image as latest before pushing it
                        docker.image("${IMAGE_NAME}:${BUILD_NUMBER}").tag("${IMAGE_NAME}:latest")
                        docker.image("${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage("Cleanup Docker Environment") {
            steps {
                script {
                    // Stop and remove all running containers
                   // sh "docker stop \$(docker ps -q) || true"
                   // sh "docker rm \$(docker ps -aq) || true"
                    
                    // Remove all Docker images
                    sh "docker rmi -f \$(docker images -q) || true"
                    
                    // Optionally, prune all Docker system resources (containers, images, volumes, networks)
                    // sh "docker system prune -af"
                }
            }
        }
    }
}
